import { deepStrictEqual as eq } from 'node:assert';
import { createSearchTokenizer, nGram, nGramUpTo, nRepetend, nRepetendUpTo, repetitions } from './index.js';

const set = (...elements) => new Set(elements);
const map = obj => new Map(obj && Object.entries(obj));
const split = strings => strings[0].split('');

eq(nGram([], 0), set());
eq(nGram([], 1), set());
eq(nGram([], 2), set());
eq(nGram(split`a`, 0), set());
eq(nGram(split`a`, 1), set('a'));
eq(nGram(split`a`, 2), set());
eq(nGram(split`aa`, 0), set());
eq(nGram(split`aa`, 1), set('a'));
eq(nGram(split`aa`, 2), set('aa'));
eq(nGram(split`aaa`, 0), set());
eq(nGram(split`aaa`, 1), set('a'));
eq(nGram(split`aaa`, 2), set('aa'));
eq(nGram(split`abcde`, 0), set());
eq(nGram(split`abcde`, 1), set('a', 'b', 'c', 'd', 'e'));
eq(nGram(split`abcde`, 2), set('ab', 'bc', 'cd', 'de'));
eq(nGram(split`abcde`, 3), set('abc', 'bcd', 'cde'));
eq(nGram(split`abcde`, 4), set('abcd', 'bcde'));
eq(nGram(split`abcde`, 5), set('abcde'));
eq(nGram(split`abcde`, 6), set());

eq(nGramUpTo([], 0), set());
eq(nGramUpTo([], 1), set());
eq(nGramUpTo([], 2), set());
eq(nGramUpTo(split`a`, 0), set());
eq(nGramUpTo(split`a`, 1), set('a'));
eq(nGramUpTo(split`a`, 2), set('a'));
eq(nGramUpTo(split`aa`, 0), set());
eq(nGramUpTo(split`aa`, 1), set('a'));
eq(nGramUpTo(split`aa`, 2), set('a', 'aa'));
eq(nGramUpTo(split`aaa`, 0), set());
eq(nGramUpTo(split`aaa`, 1), set('a'));
eq(nGramUpTo(split`aaa`, 2), set('a', 'aa'));
eq(nGramUpTo(split`abcd`, 0), set());
eq(nGramUpTo(split`abcd`, 1), set('a', 'b', 'c', 'd'));
eq(nGramUpTo(split`abcd`, 2), set('a', 'b', 'c', 'd', 'ab', 'bc', 'cd'));
eq(nGramUpTo(split`abcd`, 3), set('a', 'b', 'c', 'd', 'ab', 'bc', 'cd', 'abc', 'bcd'));
eq(nGramUpTo(split`abcd`, 4), set('a', 'b', 'c', 'd', 'ab', 'bc', 'cd', 'abc', 'bcd', 'abcd'));
eq(nGramUpTo(split`abcd`, 5), set('a', 'b', 'c', 'd', 'ab', 'bc', 'cd', 'abc', 'bcd', 'abcd'));

eq(nRepetend([], 0), map());
eq(nRepetend([], 1), map());
eq(nRepetend([], 2), map());
eq(nRepetend([], 3), map());
eq(nRepetend(split`a`, 0), map());
eq(nRepetend(split`a`, 1), map());
eq(nRepetend(split`a`, 2), map());
eq(nRepetend(split`a`, 3), map());
eq(nRepetend(split`aa`, 0), map());
eq(nRepetend(split`aa`, 1), map({ a: 2 }));
eq(nRepetend(split`aa`, 2), map());
eq(nRepetend(split`aa`, 3), map());
eq(nRepetend(split`aaa`, 1), map({ a: 3 }));
eq(nRepetend(split`aaa`, 2), map());
eq(nRepetend(split`aaa`, 3), map());
eq(nRepetend(split`aaaa`, 1), map({ a: 4 }));
eq(nRepetend(split`aaaa`, 2), map({ aa: 2 }));
eq(nRepetend(split`aaaa`, 3), map());
eq(nRepetend(split`abab`, 1), map());
eq(nRepetend(split`abab`, 2), map({ ab: 2 }));
eq(nRepetend(split`abab`, 3), map());
eq(nRepetend(split`aabb`, 1), map({ a: 2, b: 2 }));
eq(nRepetend(split`aabb`, 2), map());
eq(nRepetend(split`aabb`, 3), map());
eq(nRepetend(split`ababab`, 1), map());
eq(nRepetend(split`ababab`, 2), map({ ab: 3, ba: 2 }));
eq(nRepetend(split`ababab`, 3), map());
eq(nRepetend(split`abcabc`, 1), map());
eq(nRepetend(split`abcabc`, 2), map());
eq(nRepetend(split`abcabc`, 3), map({ abc: 2 }));
eq(nRepetend(split`aaaaabbbaaaabbbbbb`, 1), map({ a: 5, b: 6 }));
eq(nRepetend(split`aaaaabbbaaaabbbbbb`, 2), map({ aa: 2, bb: 3 }));
eq(nRepetend(split`aaaaabbbaaaabbbbbb`, 3), map({ bbb: 2 }));
eq(nRepetend(split`aaabbbbbbaaaaaaaaabbb`, 1), map({ a: 9, b: 6 }));
eq(nRepetend(split`aaabbbbbbaaaaaaaaabbb`, 2), map({ aa: 4, bb: 3 }));
eq(nRepetend(split`aaabbbbbbaaaaaaaaabbb`, 3), map({ aaa: 3, bbb: 2 }));

eq(nRepetendUpTo([], 0), map());
eq(nRepetendUpTo([], 1), map());
eq(nRepetendUpTo([], 2), map());
eq(nRepetendUpTo([], 3), map());
eq(nRepetendUpTo(split`a`, 0), map());
eq(nRepetendUpTo(split`a`, 1), map());
eq(nRepetendUpTo(split`a`, 2), map());
eq(nRepetendUpTo(split`a`, 3), map());
eq(nRepetendUpTo(split`aaaaabbbaaaabbbbbb`, 1), map({ a: 5, b: 6 }));
eq(nRepetendUpTo(split`aaaaabbbaaaabbbbbb`, 2), map({ a: 5, b: 6, aa: 2, bb: 3 }));
eq(nRepetendUpTo(split`aaaaabbbaaaabbbbbb`, 3), map({ a: 5, b: 6, aa: 2, bb: 3, bbb: 2 }));
eq(nRepetendUpTo(split`aaabbbbbbaaaaaaaaabbb`, 1), map({ a: 9, b: 6 }));
eq(nRepetendUpTo(split`aaabbbbbbaaaaaaaaabbb`, 2), map({ a: 9, b: 6, aa: 4, bb: 3 }));
eq(nRepetendUpTo(split`aaabbbbbbaaaaaaaaabbb`, 3), map({ a: 9, b: 6, aa: 4, bb: 3, aaa: 3, bbb: 2 }));

eq(repetitions([], 1), set());
eq(repetitions(split`a`, 1), set());
eq(repetitions(split`aa`, 1), set('aa'));
eq(repetitions(split`aabbbaaaabb`, 1), set('aa', 'aaa', 'aaaa', 'bb', 'bbb'));
eq(repetitions(split`aaaabbaabbb`, 1), set('aa', 'aaa', 'aaaa', 'bb', 'bbb'));

{
  const { tokenizeForIndex, tokenizeForQuery } = createSearchTokenizer();
  eq(tokenizeForIndex(''), set());
  eq(tokenizeForQuery(''), set());
  eq(tokenizeForIndex('a'), set('a'));
  eq(tokenizeForQuery('a'), set('a'));
  eq(tokenizeForIndex('aa'), set('a', 'aa'));
  eq(tokenizeForQuery('aa'), set('aa'));
  eq(tokenizeForIndex('aaa'), set('a', 'aa', 'aaa'));
  eq(tokenizeForQuery('aaa'), set('aaa'));
  eq(tokenizeForIndex('aaaa'), set('a', 'aa', 'aaa', 'aaaa'));
  eq(tokenizeForQuery('aaaa'), set('aaaa'));
  eq(tokenizeForIndex('aaaaa'), set('a', 'aa', 'aaa', 'aaaa', 'aaaaa'));
  eq(tokenizeForQuery('aaaaa'), set('aaaaa'));
  eq(tokenizeForIndex('aaaaaa'), set('a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa'));
  eq(tokenizeForQuery('aaaaaa'), set('aaaaaa'));
  eq(tokenizeForIndex('aaaaaaa'), set('a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa'));
  eq(tokenizeForQuery('aaaaaaa'), set('aaaaaaa'));
  eq(tokenizeForIndex('ab'), set('a', 'b', 'ab'));
  eq(tokenizeForQuery('ab'), set('ab'));
  eq(tokenizeForIndex('aba'), set('a', 'b', 'ab', 'ba', 'aba'));
  eq(tokenizeForQuery('aba'), set('aba'));
  eq(tokenizeForIndex('abab'), set('a', 'b', 'ab', 'ba', 'aba', 'bab', 'abab'));
  eq(tokenizeForQuery('abab'), set('abab'));
  eq(tokenizeForIndex('abcd'), set('a', 'b', 'c', 'd', 'ab', 'bc', 'cd', 'abc', 'bcd'));
  eq(tokenizeForQuery('abcd'), set('abc', 'bcd'));
  eq(tokenizeForIndex('ababa'), set('a', 'b', 'ab', 'ba', 'aba', 'bab', 'abab', 'baba'));
  eq(tokenizeForQuery('ababa'), set('abab', 'baba'));
  eq(tokenizeForIndex('ababab'), set('a', 'b', 'ab', 'ba', 'aba', 'bab', 'abab', 'baba', 'ababab'));
  eq(tokenizeForQuery('ababab'), set('ababab'));
  eq(tokenizeForIndex('abcabc'), set('a', 'b', 'c', 'ab', 'bc', 'ca', 'abc', 'bca', 'cab', 'abcabc'));
  eq(tokenizeForQuery('abcabc'), set('abcabc'));
  eq(tokenizeForIndex('aabbbb'), set('a', 'b', 'aa', 'ab', 'bb', 'aab', 'abb', 'bbb', 'bbbb'));
  eq(tokenizeForQuery('aabbbb'), set('aab', 'abb', 'bbbb'));
  eq(tokenizeForIndex('abcdabcd'), set('a', 'b', 'c', 'd', 'ab', 'bc', 'cd', 'da', 'abc', 'bcd', 'cda', 'dab'));
  eq(tokenizeForQuery('abcdabcd'), set('abc', 'bcd', 'cda', 'dab'));
  eq(tokenizeForIndex('aabcccaa'), set('a', 'b', 'c', 'aa', 'ab', 'bc', 'cc', 'ca', 'aab', 'abc', 'bcc', 'ccc', 'cca', 'caa'));
  eq(tokenizeForQuery('aabcccaa'), set('aab', 'abc', 'bcc', 'ccc', 'cca', 'caa'));
  eq(tokenizeForIndex('aaaaabbccccaa'), set('a', 'b', 'c', 'aa', 'ab', 'bb', 'bc', 'cc', 'ca', 'aaa', 'aab', 'abb', 'bbc', 'bcc', 'ccc', 'cca', 'caa', 'aaaa', 'aaaaa', 'cccc'));
  eq(tokenizeForQuery('aaaaabbccccaa'), set('aaaaa', 'aab', 'abb', 'bbc', 'bcc', 'cccc', 'cca', 'caa'));
  eq(tokenizeForIndex('🇯🇵🇯🇵🇯🇵🇯🇵'), set('🇯🇵', '🇯🇵🇯🇵', '🇯🇵🇯🇵🇯🇵', '🇯🇵🇯🇵🇯🇵🇯🇵'));
  eq(tokenizeForQuery('🇯🇵🇯🇵🇯🇵🇯🇵'), set('🇯🇵🇯🇵🇯🇵🇯🇵'));
  eq(tokenizeForIndex('🇯🇵🇩🇯🇯🇲🇯🇵🇩🇯🇯🇲'), set('🇯🇵', '🇩🇯', '🇯🇲', '🇯🇵🇩🇯', '🇩🇯🇯🇲', '🇯🇲🇯🇵', '🇯🇵🇩🇯🇯🇲', '🇩🇯🇯🇲🇯🇵', '🇯🇲🇯🇵🇩🇯', '🇯🇵🇩🇯🇯🇲🇯🇵🇩🇯🇯🇲'));
  eq(tokenizeForQuery('🇯🇵🇩🇯🇯🇲🇯🇵🇩🇯🇯🇲'), set('🇯🇵🇩🇯🇯🇲🇯🇵🇩🇯🇯🇲'));
  eq(tokenizeForIndex('🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿'), set('🏴󠁧󠁢󠁥󠁮󠁧󠁿', '🏴󠁧󠁢󠁷󠁬󠁳󠁿', '🏴󠁧󠁢󠁳󠁣󠁴󠁿', '🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿', '🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿', '🏴󠁧󠁢󠁳󠁣󠁴󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿', '🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿', '🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿', '🏴󠁧󠁢󠁳󠁣󠁴󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿', '🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿'));
  eq(tokenizeForQuery('🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿'), set('🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿'));
  eq(tokenizeForIndex('🇯🇵🇩🇯🇯🇲🇸🇯🇯🇵🇩🇯🇯🇲🇸🇯'), set('🇯🇵', '🇩🇯', '🇯🇲', '🇸🇯', '🇯🇵🇩🇯', '🇩🇯🇯🇲', '🇯🇲🇸🇯', '🇸🇯🇯🇵', '🇯🇵🇩🇯🇯🇲', '🇩🇯🇯🇲🇸🇯', '🇯🇲🇸🇯🇯🇵', '🇸🇯🇯🇵🇩🇯'));
  eq(tokenizeForQuery('🇯🇵🇩🇯🇯🇲🇸🇯🇯🇵🇩🇯🇯🇲🇸🇯'), set('🇯🇵🇩🇯🇯🇲', '🇩🇯🇯🇲🇸🇯', '🇯🇲🇸🇯🇯🇵', '🇸🇯🇯🇵🇩🇯'));
}
